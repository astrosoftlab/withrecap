name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version-file: '.nvmrc'
          cache: 'yarn'
      - name: Install Dependencies
        run: |
          yarn --immutable
      - name: Create env file
        run: |
          echo "FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}" > .env.production
          echo "FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }}" >> .env.production
          echo "FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> .env.production
          echo "FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}" >> .env.production
          echo "FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}" >> .env.production
          echo "FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}" >> .env.production
          echo "FIREBASE_MEASUREMENT_ID=${{ secrets.FIREBASE_MEASUREMENT_ID }}" >> .env.production
      - name: Build
        working-directory: ./packages/extension
        run: |
          yarn build
          yarn package
      - name: Get version from package.json
        id: get_version
        run: echo "::set-output name=version::$(node -p -e "require('./package.json').version")"
      - name: Check version
        id: check_version
        run: |
          if [[ "$(git tag -l v${{ steps.get_version.outputs.version }})" != "" ]]; then
            echo "::set-output name=version_bump::false"
          else
            echo "::set-output name=version_bump::true"
          fi
      - name: Create release
        if: steps.check_version.outputs.version_bump == 'true'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v0.0.${{ github.run_number }}
          release_name: Release v0.0.${{ github.run_number }}
          draft: false
          prerelease: false
      - name: Upload release asset
        if: steps.check_version.outputs.version_bump == 'true'
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./packages/extension/dist.zip
          asset_name: recap-v0.0.${{ github.run_number }}.zip
          asset_content_type: application/zip
